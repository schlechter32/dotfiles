#! /bin/bash

# Determine the correct binary based on system
if [[ "$(uname)" == "Darwin" && "$(uname -m)" == "arm64" ]]; then
    CONFIG_PARSER="$HOME/dotfiles_ikr/nbin/sshconfigparser-darwin-arm64"
elif [[ "$(uname)" == "Linux" && "$(uname -m)" == "x86_64" ]]; then
    CONFIG_PARSER="$HOME/dotfiles_ikr/nbin/sshconfigparser-linux-amd64"
else
    echo "Unsupported system architecture"
    exit 1
fi

# Check if the binary exists and is executable
if [[ ! -x "$CONFIG_PARSER" ]]; then
    echo "Config parser binary not found or not executable: $CONFIG_PARSER"
    exit 1
fi

# Argument parsing
ssh_base_command="ssh"
while [[ $# -gt 0 ]]; do
    case $1 in
        -p) ssh_base_command+=" -p $2"; shift ;;
        -l) ssh_base_command+=" -l $2"; shift ;;
        -i) ssh_base_command+=" -i $2"; shift ;;
        -X) ssh_base_command+=" -X" ;;
        -Y) ssh_base_command+=" -X" ;;
        -N) ssh_base_command+=" -N" ;;
        -L) ssh_base_command+=" -L $2:localhost:$2"; shift;;
        -C) ssh_base_command+=" -C" ;;
        -D) ssh_base_command+=" -D $2"; shift;;
        *) break ;;
    esac
    shift
done

# Main script starts here
initial_host=$1

determine_sshpass_prompt_pw() {
  local host="$1"
  if [[ $(command -v pass) ]]; then
    opt_pw=$(pass show "ssh/$host")
  fi
  if [ -n "$opt_pw" ]; then
    echo "sshpass -p $opt_pw"
  else
    echo ""
  fi
}

# Logic
config=$("$CONFIG_PARSER" "$initial_host")
# echo "config is $config"

user=$(echo "$config" | grep -o "User [^ ]*" | awk '{print $2}')
user=${user:-nclshrnk}
echo "user is $user"

jump_host=$(echo "$config" | grep -o "ProxyJump [^ ]*" | awk '{print $2}')
initial_host_ip=$(echo "$config" | grep -o "HostName [^ ]*" | awk '{print $2}')
# echo "hostname var is $initial_host_ip"
if [ -n "$jump_host" ]; then
    jump_host_config=$("$CONFIG_PARSER" "$jump_host")
    echo "jump host config $jump_host_config"
    jump_host_ip=$(echo "$jump_host_config" | grep -o "HostName [^ ]*" | awk '{print $2}')
fi

echo "Connecting to $user@$initial_host with $initial_host_ip "
echo "Jump host $jump_host with ip $jump_host_ip"
if [[ "$jump_host" == "netserv1" || "$initial_host_ip" =~ ^129\.69\.172\.[456]$ ]]; then
  if [ $(uname) == "Darwin" ]; then
    echo "On mac so using mac to execute knock on $initial_host with $initial_host_ip"
    ~/nbin/libscripts/knock_lab_mac --target "${jump_host_ip:-$initial_host_ip}"
  else 
    ~/nbin/libscripts/knock_lab --target "${jump_host_ip:-$initial_host_ip}"
  fi
fi
if [[ "$jump_host" == "ingress" || "$initial_host" == "ingress" ]]; then
    echo "host on ikr"
  if [ $(uname) == "Darwin" ]; then
    echo "On mac so ikr_knock_mac"
    ~/nbin/knock_ikr_mac
  else 
    ~/nbin/libscripts/knock_ikr_linux
  fi
fi
# Determine the full SSH command
sshcommand="$ssh_base_command $initial_host"

if [ -n "$jump_host" ]; then
    # Jump host scenario
    if [[ $(command -v pass) ]]; then
        # Try to get passwords from password store
        jump_pw=$(pass show "ssh/$jump_host" 2>/dev/null)
        # target_pw=$(pass show "ssh/$initial_host" 2>/dev/null)
        
        # echo "jump pw is $jump_pw"
        if [ -n "$jump_pw" ]; then
            # Both passwords available, use sshpass with ProxyCommand
            echo "With jumppw"
            sshpass -d 123 $ssh_base_command -o ProxyCommand="sshpass -p $jump_pw ssh -W %h:%p $jump_host" "$user@$initial_host_ip" 123<<<"$jump_pw"
        else
            # Passwords not available, use normal ssh
            echo "Passwords not available, use normal ssh"
            $ssh_base_command "$user@$initial_host"
        fi
    else
        # pass command not available, use normal ssh
        echo "No jump host"
        $ssh_base_command "$user@$initial_host"
    fi
else
    # Direct connection (no jump host)
    if [[ $(command -v pass) ]]; then
        target_pw=$(pass show "ssh/$initial_host" 2>/dev/null)
        if [ -n "$target_pw" ]; then
            # Password available, use sshpass
            echo "No jump host pass"
            sshpass -p "$target_pw" $sshcommand
        else
            echo "No jump host sshkey"
            # Password not available, use normal ssh
            echo "connecting wiht $sshcommand"
            $sshcommand
        fi
    else
        echo "No pass"
        # pass command not available, use normal ssh
        $sshcommand
    fi
fi
