#!/bin/bash

# Argument parsing
ssh_base_command="ssh"
while [[ $# -gt 0 ]]; do
    case $1 in
        -p) ssh_base_command+=" -p $2"; shift ;;
        -l) ssh_base_command+=" -l $2"; shift ;;
        -i) ssh_base_command+=" -i $2"; shift ;;
        -X) ssh_base_command+=" -X" ;;
        -Y) ssh_base_command+=" -X" ;;
        -N) ssh_base_command+=" -N" ;;
        -L) ssh_base_command+=" -L $2:localhost:$2"; shift;;
        -C) ssh_base_command+=" -C" ;;
        -D) ssh_base_command+=" -D $2"; shift;;
        *) break ;;
    esac
    shift
done

initial_host=$1

# Functions
get_ssh_config_block() {
    local initial_host="$1"
    awk -v host="$initial_host" '
        BEGIN { found = 0; print_block = 0; }
        /^Host / {
            if ($2 == host) {
                found = 1;
                print_block = 1;
            } else if (found) {
                print_block = 0;
                exit;
            }
        }
        print_block { print; }
    ' ~/.ssh/config
}

determine_sshpass_prompt_pw() {
    local host="$1"
    # echo "Host for pw $host"
    local password=$(pass show "ssh/$host" 2>/dev/null)
    if [ -n "$password" ]; then
        echo "sshpass -p $password"
    else
        echo ""
    fi
}

execute_knock() {
    local host="$1"
    local target_host="$2"  # This will be the HostName from the config
    local os_type=$(uname)

    # Default knock script paths
    local knock_ikr_mac="~/nbin/knock_ikr_mac"
    local knock_ikr_linux="~/nbin/libscripts/knock_ikr_linux"
    local knock_lab_mac="~/nbin/knock_lab_mac"
    local knock_lab_linux="~/nbin/libscripts/knock_lab_linux"

    case $host in
        "ingress"|"ingressstud")
            if [ "$os_type" = "Darwin" ]; then
                echo "Knocking IKR Mac"
                $knock_ikr_mac
            else
                echo "Knocking IKR Linux"
                $knock_ikr_linux
            fi
            ;;
        *)
            # For direct connections to cobra* hosts or through netserv1
            case $target_host in
                "129.69.172.4")  # netserv1
                    if [ "$os_type" = "Darwin" ]; then
                        $knock_lab_mac --target $target_host
                    else
                        $knock_lab_linux --target $target_host
                    fi
                    ;;
                "129.69.172.6"|"129.69.172.7"|"129.69.172.8")  # cobra hosts
                    if [ "$os_type" = "Darwin" ]; then
                        $knock_lab_mac --target $target_host
                    else
                        $knock_lab_linux --target $target_host
                    fi
                    ;;
            esac
            ;;
    esac
}

# Get configuration
config=$(get_ssh_config_block "$initial_host")
echo "config is: $config"
user=$(echo "$config" | grep -o "User [^ ]*" | awk '{print $2}')
jump_needed=$(echo "$config" | grep -o "ProxyJump [^ ]*" | awk '{print $2}')
echo "Global jump needed $jump_needed"
hostname_var=$(echo "$config" | grep -o "HostName [^ ]*" | awk '{print $2}')

echo "Connecting to $initial_host with $hostname_var"

# Handle ProxyJump specific knock commands
if [ -n "$jump_needed" ]; then
    execute_knock "$jump_needed" "$hostname_var"
else
    # For direct connections
    execute_knock "$initial_host" "$hostname_var"
fi

# Build and execute SSH command
sshcommand="$ssh_base_command $initial_host"
sshpass_command=$(determine_sshpass_prompt_pw "$initial_host")

echo "SShpass command: $sshpass_command $sshcommand"
if [ -n "$jump_needed" ]; then
    jump_pw=$(pass show "ssh/$jump_needed" 2>/dev/null)
    host_pw=$(pass show "ssh/$initial_host" 2>/dev/null)
    
    if [ -n "$jump_pw" ] && [ -n "$host_pw" ]; then
        proxy_cmd="sshpass -p '$jump_pw' ssh -W %h:%p $jump_needed"
        echo "$host_pw" | sshpass -p "$host_pw" $ssh_base_command -o "ProxyCommand=$proxy_cmd" "$user@$hostname_var"
    else
        echo "Error: Missing passwords for jump host or target host"
        exit 1
    fi
else
    if [ -n "$sshpass_command" ]; then

echo "SShpass command: $sshpass_command $sshcommand"
        $sshpass_command $sshcommand
    else
        $sshcommand
    fi
fi
