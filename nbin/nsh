#!/bin/bash
# Arguments
initial_host=$1
# Functions
get_ssh_config_block() {
    local initial_host="$1"
    local config=$(awk -v host="$initial_host" '
        BEGIN { found = 0; print_block = 0; }
        /^Host / {  # This regex matches lines that exactly start with "Host " followed by a space
            if ($2 == host) {
                found = 1;  # Start of the desired host block
                print_block = 1;  # Enable printing
            } else if (found) {
                print_block = 0;  # If another host block starts and weve already found our block, stop printing
                exit;  # Exit the program as were done printing the desired block
            }
        }
        print_block { print; }  # Print lines of the current block
        ' ~/.ssh/config)
    
    if [ -n "$config" ]; then
        echo "$config"
    else
        echo "No configuration found for host: $initial_host"
    fi
}
determine_sshpass_prompt_pw() {
  local host="$1"
  opt_pw=$(security find-generic-password -s $host  -w)
  if [ -n "$opt_pw" ]; then
    # echo "pw not "
    echo "sshpass -p $opt_pw"
  else
    echo ""
    # echo "pw found"
  fi
}
# Logic
config=$(get_ssh_config_block $initial_host)
user=$(echo $config | grep -o "User [^ ]*" | awk '{print $2}')
jump_needed=$(echo $config | grep -o "ProxyJump [^ ]*" | awk '{print $2}')
hostname_var=$(echo $config | grep -o "HostName [^ ]*" | awk '{print $2}')
echo "Connecting to $initial_host with $hostname_var"
lab_list=("smart" "netserv1")
ikr_cent_list=("cnode01" "ingress" )
# Get password from secure storage on macos
if [[ " ${lab_list[@]} " =~ " $initial_host " ]]; then
  echo "host on lab list"
  if [ $(uname) == "Darwin" ]; then
    echo "On mac so using docker to execute knock"
  ~/nbin/libscripts/docker_knock_lab
else 
  ~/nbin/libscripts/knock_lab --target $hostname_var

  fi
fi
echo "Initial hsot for checking $initial_host"
if [[ " ${ikr_cent_list[@]} " =~ " $initial_host " ]]; then
  echo "host on ikr"
  if [ $(uname) == "Darwin" ]; then
    echo "On mac so using docker to execute knock"
  ~/nbin/libscripts/docker_knock
else 
  ~/nbin/libscripts/knock_ikr_linux

  fi
fi
ssh_base_command="ssh -X -C"
sshcommand="$ssh_base_command $user@$hostname_var"
sshpass_command=$(determine_sshpass_prompt_pw $initial_host)

echo $sshcommand
if [ -n "$jump_needed" ]; then
  echo "Jump needed statement "
  jump_pw=$(security find-generic-password -s $jump_needed  -w)
  pw=$(security find-generic-password -s $initial_host  -w)
  echo "sshpass -d 123 $ssh_base_command -o ProxyCommand="sshpass -p $jump_pw ssh -W %h:%p $jump_needed"  $user@$hostname_var 123<<<$pw"

  sshpass -d 123 $ssh_base_command -o ProxyCommand="sshpass -p $jump_pw ssh -W %h:%p $jump_needed"  $user@$hostname_var 123<<<$pw
else
  echo "jump needed"
  $sshpass_command $sshcommand
fi
# Usefull flags 
# -C compression
# -N No remote command useful for ports andtinneling
# env SSHPASS="JUMP_PASSWORD" \
#   sshpass -d 123 ssh \
#   -o ProxyCommand="sshpass -e ssh -W %h:%p JUMP_USER@JUMP_HOST" \
#   TARGET_USER@TARGET_HOST \
#   123<<<TARGET_PASSWORD
# env SSHPASS="JUMP_PASSWORD" \
# rsync -v -a \
#   -e "sshpass -d 123 ssh \
#     -o ProxyCommand=\"sshpass -e ssh -W %h:%p USER@JUMP_HOST\" USER@TARGET_HOST" \
#   :/remote/directory/  /local/directory/  \
# 123<<<TARGET_PASSWORD
